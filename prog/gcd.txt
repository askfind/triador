R2 PPO # write 12 to R2
R3 NOP # write -8 to R3
RR OPN # copy R2 to R1 <─────────────┐
SK ONN # skip if R1>=0               │ ┌─────────────────────────────┐
OP PON # R1 = -R1                    │ │ // This program computes    │
RR ONP # copy R1 to R2               │ │ // the greatest common      │
RR OPO # copy R3 to R1               │ │ // divisor between R2       │
SK ONP # skip if R1<=0               │ │ // and R3. The result is    │
OP PON # R1 = -R1                    │ │ // stored in R2.            │
RR ONO # copy R1 to R3               │ │ //                          │
R1 NNO #                             │ │ // A C++ world equivalent   │
RR NNN # choose segment NNO          │ │ // is listed below:         │
JP NNN # subroutine call ────────┐   │ │                             │
R1 NNN # R4=R2+R3 <──────────────│─┐ │ │  int R2=-12, R3=8;          │
RR NNN # choose segment NNN      │ │ │ │  int R1, R4, R5;            │
SK NNO # skip if R4!=0           │ │ │ │                             │
JP PPP # terminate ────────────┐ │ │ │ │  // compute R4 = R3 + R2    │
SK PPN # skip if R4<0          │ │ │ │ │  // R1 and R5 are used      │
JP POO # ────────────────┐     │ │ │ │ │  void add_R2_R3() {         │
RR OPP # copy R4 to R1   │     │ │ │ │ │      R5 = R2;               │
RR ONO # copy R1 to R3   │     │ │ │ │ │      R4 = R3;               │
JP PPN # jp outer loop ──│┐    │ │ │ │ │      while (R2!=0) {        │
RR OPP # copy R4 to R1 <─┘│    │ │ │ │ │          R1 = R4;           │
RR ONP # copy R1 to R2    │    │ │ │ │ │          if (R2>0) R1++;    │
RR OOO # do nothing <─────┘    │ │ │ │ │          if (R2<0) R1--;    │
JP NNP # outer loop ───────────│─│─│─┘ │          R4 = R1;           │
EX PPP # halt and catch fire <─┘ │ │   │          R1 = R2;           │
RR OPN # copy R2 to R1 <─────────┘ │   │          if (R2>0) R1--;    │
RR NPP # copy R1 to R5             │   │          if (R2<0) R1++;    │
RR OPO # copy R3 to R1             │   │          R2 = R1;           │
RR ONN # copy R1 to R4             │   │      }                      │
RR OPP # copy R4 to R1 <───┐       │   │      R2 = R5;               │
SK NPO # skip if R2!=0     │       │   │  }                          │
JP PNO # R2==0, terminate ─│─┐     │   │                             │
SK PNP # skip if R2>0      │ │     │   │  int main() {               │
RR OON # R1--              │ │     │   │      while (true) {         │
SK PNN # skip if R2<0      │ │     │   │          if (R2<0) R2=-R2;  │
RR OOP # R1++              │ │     │   │          if (R3>0) R3=-R3;  │
RR ONN # copy R1 to R4     │ │     │   │          add_R2_R3();       │
RR OPN # copy R2 to R1     │ │     │   │          if (R4==0) break;  │
SK PNP # skip if R2>0      │ │     │   │          if (R4<0)          │
RR OOP # R1++              │ │     │   │              R3 = R4;       │
SK PNN # skip if R2<0      │ │     │   │          else               │
RR OON # R1--              │ │     │   │              R2 = R4;       │
RR ONP # copy R1 to R2     │ │     │   │      }                      │
JP NOO # loop ─────────────┘ │     │   │      return 0;              │
RR PNN # copy R5 to R1 <─────┘     │   │  }                          │
RR ONP # copy R1 to R2             │   │                             │
R1 NNN #                           │   └─────────────────────────────┘
RR NNN # choose segment NNN        │
JP OOO # sub return, R4=R2+R3 ─────┘
